% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/stglmm.R
\name{stglmm}
\alias{stglmm}
\title{Fitting Spatial temporal GLMMs}
\usage{
stglmm(
  fixed,
  data,
  locations,
  times,
  family,
  covfn,
  iter,
  chains,
  cores,
  param_start = NULL,
  priors,
  tuning,
  nu,
  rank_sp,
  rank_tm,
  dist_metric = "euclidean"
)
}
\arguments{
\item{fixed}{an object of class formula specifying the fixed effects}

\item{data}{covariates and outcome variables for the model}

\item{locations}{a 2 by n matrix containing each location as an x, y pair}

\item{times}{a vector containing each time}

\item{family}{a description of the error distribution and link function,
either a character string that is one of "poisson", "gaussian", or "binomial", or
the family function corresponding to one of these.}

\item{covfn}{TODO: Delete this}

\item{iter}{the number of iterations to run each chain}

\item{chains}{the number of chains to run}

\item{cores}{right now nothing, idk how to parallelize}

\item{priors}{a complicated list of priors, see examples}

\item{tuning}{a complicated list of tuning parameters, see examples}

\item{nu}{a parameter for the Matern covariance function, is always 2.5 right now}

\item{rank_sp}{the rank of the approximation of the spatial covariance matrix}

\item{rank_tm}{the rank of the approximation of the temporal covariance matrix}

\item{dist_metric}{the distance metric to use when calculating distance between spatial locations. Either "euclidean" for euclidean distance or "globe" for distance based on latitude and longitude over the globe.}
}
\value{
A list containing all of the info you need
}
\description{
\code{stglmm} fits a spatial temporal generalized linear mixed model
}
\details{
This function fits the spatial temporal GLMM with additive covariance, matern spatial covariance,
and squared exponential temporal covariance. It uses the random projections algorithm
}
\examples{
\dontrun{
stglmm(
fixed = y_pois ~ x1 + x2 + x3,
data = sim_data,
locations = locations,
times = time,
family = poisson(),
covfn = covfndef(nu),
iter = 1000,
chains = 2,
cores = 1,
priors = list("beta.normal" = 100, # variance of beta prior
              "s2_sp_IG" = c(2,2), # inverse gamma params
              "s2_tm_IG" = c(2,2),
              "phi_sp_unif" = c(0.01, 1.5),
              "phi_tm_unif" = c(0.01, 1.5)), # uniform prior on phi
tuning = list("beta" = rnorm(4, 1, 0.2),
              "s2_sp" = 0.1,
              "phi_sp" = 0.01,
              "s2_tm" = 0.1,
              "phi_tm" = 0.01,
              "delta" = 0.1,
              "alpha" = 0.1),
nu = nu,
rank_sp = 10,
rank_tm = 5)
}
}
